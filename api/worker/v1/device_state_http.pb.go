// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0-rc7

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type DeviceStateHTTPServer interface {
	Get(context.Context, *DeviceStateGetRequest) (*DeviceStateGetReply, error)
	Refresh(context.Context, *DeviceStateRefreshRequest) (*DeviceStateRefreshReply, error)
	Restart(context.Context, *DeviceRestartRequest) (*DeviceRestartReply, error)
	SyncTime(context.Context, *SyncTimeRequest) (*SyncTimeReply, error)
}

func RegisterDeviceStateHTTPServer(s *http.Server, srv DeviceStateHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/device/state/restart", _DeviceState_Restart0_HTTP_Handler(srv))
	r.POST("/v1/device/state/sync_time", _DeviceState_SyncTime0_HTTP_Handler(srv))
	r.POST("/v1/device/state/refresh", _DeviceState_Refresh0_HTTP_Handler(srv))
	r.GET("/v1/device/state/port", _DeviceState_Get0_HTTP_Handler(srv))
}

func _DeviceState_Restart0_HTTP_Handler(srv DeviceStateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeviceRestartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.worker.v1.DeviceState/Restart")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Restart(ctx, req.(*DeviceRestartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceRestartReply)
		return ctx.Result(200, reply)
	}
}

func _DeviceState_SyncTime0_HTTP_Handler(srv DeviceStateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SyncTimeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.worker.v1.DeviceState/SyncTime")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SyncTime(ctx, req.(*SyncTimeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SyncTimeReply)
		return ctx.Result(200, reply)
	}
}

func _DeviceState_Refresh0_HTTP_Handler(srv DeviceStateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeviceStateRefreshRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.worker.v1.DeviceState/Refresh")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Refresh(ctx, req.(*DeviceStateRefreshRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceStateRefreshReply)
		return ctx.Result(200, reply)
	}
}

func _DeviceState_Get0_HTTP_Handler(srv DeviceStateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeviceStateGetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.worker.v1.DeviceState/Get")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*DeviceStateGetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeviceStateGetReply)
		return ctx.Result(200, reply)
	}
}

type DeviceStateHTTPClient interface {
	Get(ctx context.Context, req *DeviceStateGetRequest, opts ...http.CallOption) (rsp *DeviceStateGetReply, err error)
	Refresh(ctx context.Context, req *DeviceStateRefreshRequest, opts ...http.CallOption) (rsp *DeviceStateRefreshReply, err error)
	Restart(ctx context.Context, req *DeviceRestartRequest, opts ...http.CallOption) (rsp *DeviceRestartReply, err error)
	SyncTime(ctx context.Context, req *SyncTimeRequest, opts ...http.CallOption) (rsp *SyncTimeReply, err error)
}

type DeviceStateHTTPClientImpl struct {
	cc *http.Client
}

func NewDeviceStateHTTPClient(client *http.Client) DeviceStateHTTPClient {
	return &DeviceStateHTTPClientImpl{client}
}

func (c *DeviceStateHTTPClientImpl) Get(ctx context.Context, in *DeviceStateGetRequest, opts ...http.CallOption) (*DeviceStateGetReply, error) {
	var out DeviceStateGetReply
	pattern := "/v1/device/state/port"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.worker.v1.DeviceState/Get"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceStateHTTPClientImpl) Refresh(ctx context.Context, in *DeviceStateRefreshRequest, opts ...http.CallOption) (*DeviceStateRefreshReply, error) {
	var out DeviceStateRefreshReply
	pattern := "/v1/device/state/refresh"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.worker.v1.DeviceState/Refresh"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceStateHTTPClientImpl) Restart(ctx context.Context, in *DeviceRestartRequest, opts ...http.CallOption) (*DeviceRestartReply, error) {
	var out DeviceRestartReply
	pattern := "/v1/device/state/restart"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.worker.v1.DeviceState/Restart"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DeviceStateHTTPClientImpl) SyncTime(ctx context.Context, in *SyncTimeRequest, opts ...http.CallOption) (*SyncTimeReply, error) {
	var out SyncTimeReply
	pattern := "/v1/device/state/sync_time"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.worker.v1.DeviceState/SyncTime"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
