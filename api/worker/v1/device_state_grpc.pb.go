// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceStateClient is the client API for DeviceState service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceStateClient interface {
	// 设备重启
	Restart(ctx context.Context, in *DeviceRestartRequest, opts ...grpc.CallOption) (*DeviceRestartReply, error)
	// 同步时间
	SyncTime(ctx context.Context, in *SyncTimeRequest, opts ...grpc.CallOption) (*SyncTimeReply, error)
	// 刷新设备状态
	Refresh(ctx context.Context, in *DeviceStateRefreshRequest, opts ...grpc.CallOption) (*DeviceStateRefreshReply, error)
	// 获取设备状态
	Get(ctx context.Context, in *DeviceStateGetRequest, opts ...grpc.CallOption) (*DeviceStateGetReply, error)
}

type deviceStateClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceStateClient(cc grpc.ClientConnInterface) DeviceStateClient {
	return &deviceStateClient{cc}
}

func (c *deviceStateClient) Restart(ctx context.Context, in *DeviceRestartRequest, opts ...grpc.CallOption) (*DeviceRestartReply, error) {
	out := new(DeviceRestartReply)
	err := c.cc.Invoke(ctx, "/api.worker.v1.DeviceState/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceStateClient) SyncTime(ctx context.Context, in *SyncTimeRequest, opts ...grpc.CallOption) (*SyncTimeReply, error) {
	out := new(SyncTimeReply)
	err := c.cc.Invoke(ctx, "/api.worker.v1.DeviceState/SyncTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceStateClient) Refresh(ctx context.Context, in *DeviceStateRefreshRequest, opts ...grpc.CallOption) (*DeviceStateRefreshReply, error) {
	out := new(DeviceStateRefreshReply)
	err := c.cc.Invoke(ctx, "/api.worker.v1.DeviceState/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceStateClient) Get(ctx context.Context, in *DeviceStateGetRequest, opts ...grpc.CallOption) (*DeviceStateGetReply, error) {
	out := new(DeviceStateGetReply)
	err := c.cc.Invoke(ctx, "/api.worker.v1.DeviceState/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceStateServer is the server API for DeviceState service.
// All implementations must embed UnimplementedDeviceStateServer
// for forward compatibility
type DeviceStateServer interface {
	// 设备重启
	Restart(context.Context, *DeviceRestartRequest) (*DeviceRestartReply, error)
	// 同步时间
	SyncTime(context.Context, *SyncTimeRequest) (*SyncTimeReply, error)
	// 刷新设备状态
	Refresh(context.Context, *DeviceStateRefreshRequest) (*DeviceStateRefreshReply, error)
	// 获取设备状态
	Get(context.Context, *DeviceStateGetRequest) (*DeviceStateGetReply, error)
	mustEmbedUnimplementedDeviceStateServer()
}

// UnimplementedDeviceStateServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceStateServer struct {
}

func (UnimplementedDeviceStateServer) Restart(context.Context, *DeviceRestartRequest) (*DeviceRestartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedDeviceStateServer) SyncTime(context.Context, *SyncTimeRequest) (*SyncTimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTime not implemented")
}
func (UnimplementedDeviceStateServer) Refresh(context.Context, *DeviceStateRefreshRequest) (*DeviceStateRefreshReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedDeviceStateServer) Get(context.Context, *DeviceStateGetRequest) (*DeviceStateGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDeviceStateServer) mustEmbedUnimplementedDeviceStateServer() {}

// UnsafeDeviceStateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceStateServer will
// result in compilation errors.
type UnsafeDeviceStateServer interface {
	mustEmbedUnimplementedDeviceStateServer()
}

func RegisterDeviceStateServer(s grpc.ServiceRegistrar, srv DeviceStateServer) {
	s.RegisterService(&DeviceState_ServiceDesc, srv)
}

func _DeviceState_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceStateServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.worker.v1.DeviceState/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceStateServer).Restart(ctx, req.(*DeviceRestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceState_SyncTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceStateServer).SyncTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.worker.v1.DeviceState/SyncTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceStateServer).SyncTime(ctx, req.(*SyncTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceState_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStateRefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceStateServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.worker.v1.DeviceState/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceStateServer).Refresh(ctx, req.(*DeviceStateRefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceState_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStateGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceStateServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.worker.v1.DeviceState/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceStateServer).Get(ctx, req.(*DeviceStateGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceState_ServiceDesc is the grpc.ServiceDesc for DeviceState service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceState_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.worker.v1.DeviceState",
	HandlerType: (*DeviceStateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Restart",
			Handler:    _DeviceState_Restart_Handler,
		},
		{
			MethodName: "SyncTime",
			Handler:    _DeviceState_SyncTime_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _DeviceState_Refresh_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DeviceState_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/worker/v1/device_state.proto",
}
