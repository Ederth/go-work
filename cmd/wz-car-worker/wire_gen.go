// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"wz-car-worker/internal/biz"
	"wz-car-worker/internal/conf"
	"wz-car-worker/internal/data"
	"wz-car-worker/internal/protocol"
	"wz-car-worker/internal/server"
	"wz-car-worker/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase, logger)
	mq := data.NewMq(dataData, logger)
	onlineAtRepo := data.NewOnlineAtRepo(dataData)
	portStateRepo := data.NewPortStateRepo(dataData)
	deviceStateRepo := data.NewDeviceStateRepo(dataData, logger, mq, onlineAtRepo, portStateRepo)
	deviceStateUseCase := biz.NewDeviceStateUseCase(logger, deviceStateRepo)
	deviceStateService := service.NewDeviceStateService(logger, deviceStateUseCase)
	httpServer := server.NewHTTPServer(confServer, logger, greeterService, deviceStateService)
	grpcServer := server.NewGRPCServer(confServer, greeterService, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}

func initConsumer(confData *conf.Data, logger log.Logger) (*protocol.Dispatcher, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	mq := data.NewMq(dataData, logger)
	onlineAtRepo := data.NewOnlineAtRepo(dataData)
	portStateRepo := data.NewPortStateRepo(dataData)
	deviceStateRepo := data.NewDeviceStateRepo(dataData, logger, mq, onlineAtRepo, portStateRepo)
	onlineCmdUseCase := biz.NewOnlineCmdUseCase(logger, deviceStateRepo)
	stateReportCmdUseCase := biz.NewStateReportCmdUseCase(logger, deviceStateRepo)
	syncTimeCmdUseCase := biz.NewSyncTimeCmdUseCase(logger)
	deviceRestartCmdUseCase := biz.NewDeviceRestartCmdUseCase(logger)
	dispatcher := protocol.NewDispatcher(confData, logger, onlineCmdUseCase, stateReportCmdUseCase, syncTimeCmdUseCase, deviceRestartCmdUseCase)
	return dispatcher, func() {
		cleanup()
	}, nil
}
